sp {dialog-event*agent-game-action-description*propose*get-game-details
   (state <s> #^name dialog-event
              ^PR-game-details <val>
              -^generated
              -^combined
              ^all-structures-retrieved true
              ^set <set>)
   (<set> ^conditions <cond>)
   (<cond> ^structure-type <str>)  
   -{(<s> ^set {> <set> <set2>})}
   -{(<set> ^conditions {> <cond> <cond2>})}
-->
   (<s> ^operator <o> +)
   (<o> ^name get-game-details
        #^descriptions <descs>
        ^PR-game-details <val>)
}

###################################################################
# Apply operator get-game-details
###################################################################

sp {states*apply*get-game-details*add-descriptions-to-state
   (state <s> ^operator <o>
        	  ^set <set>)
   (<set> ^handle <handle>)
   (<o> ^name get-game-details
        #^descriptions <descs>
        ^PR-game-details <val>)
-->              
   (<s> ^descriptions <descs>
        ^PR-game-details <val>)
   (<descs> ^handle <handle>)
}

sp {dialog-event*apply*get-game-details*add-concept-name-to-descriptions
   (state <s> ^name dialog-event
              ^PR-game-details
              ^operator <o>
              ^purpose.type agent-game-concept-definition
              ^sentence <sentence>
              ^descriptions <descs>)
   (<o> ^name get-game-details
        #^descriptions <descs>
   )
-->
   (<descs> ^sentence <sentence>)
}

## PR - conditions such as all locations are occupied
# PR - the following rule might apply on the count part too and here as well (i.e. count of free clear blocks,latter being accounted for twice
sp {states*apply*get-game-details*get-single-object-description
   (state <s> ^operator <o>
              ^descriptions <descs>
              ^set <set>)
   (<o> ^name get-game-details)
   (<descs> ^handle <handle>)
   (<set> ^handle <handle>
          ^conditions <cond>)
   (<cond> ^name <name>
           ^args <args>
           ^negative <neg>
           ^parameter <param>)
   (<param> ^1 <param1>)
   (<param1> ^param-id <param-id>
            ^type <rtype>)
   (<args> ^1 <obj1>
           -^2)
   (<obj1> ^name <name2>
           ^parameter <param2>)
   (<param2> ^1.param-id <param-id>)
-->
   (<descs> ^description <desc>
            ^obj-desc <obj-desc>)
   (<desc> ^type set-description
           ^unsatisfied yes #if resolve-satisfaction-failure
           ^negative <neg>
           ^1 <param-id>
           ^set-description <name>)
   (<obj-desc> ^1 <obj1>
               ^rtype <rtype>
               ^param-id <param-id>)
}

# if only one param-id exists in a prepositional phrase, store it as one argument
sp {states*apply*get-game-details*retrieve-PP-predicate
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^operator <o>
        	  ^set <set>)
   (<o> ^name get-game-details)
   (<descs> ^handle <handle>)
   (<set> ^handle <handle>
          ^conditions <cond>)
   (<cond> ^name <name>
   	   ^args <args>
       ^structure-type <str>
   	   ^parameter <param>
   	   ^negative <neg>)
   (<args> ^1 <obj1>
           ^2 <obj2>
           -^3)
   (<param> ^1 <first>
            -^2)
   (<first> ^param-id <param-id>
            ^type <rtype>)
-->
   (<descs> ^obj-desc <obj-desc>
            ^description <desc>)
   (<desc> ^prep <name>
           ^structure-type <str>
           ^unsatisfied yes #if resolve-satisfaction-failure
           ^1 <param-id>
           ^2 id2
           ^negative <neg>
           ^id2 <obj2>)
   (<obj-desc> ^1 <obj1>
               ^param-id <param-id>
               ^rtype <rtype>)
}

sp {states*apply*get-game-details*retrieve-PP-predicate*argument-level-condition
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^operator <o>
              ^set <set>)
   (<o> ^name get-game-details)
   (<descs> ^handle <handle>)
   (<set> ^handle <handle>
          -^conditions <cond>)
   -{(<set> -^conditions.args.<< 1 2 3 >> <cond>)
     (<descs> -^obj-desc.1.args.2 <cond>)}
   (<cond> ^name <name>
           ^args <args>
           ^structure-type <str>
           ^parameter <param>
           ^negative <neg>
           ^type state-pair)
   (<args> ^1 <obj1>
           ^2 <obj2>
           -^3)
   (<param> ^1 <first>
            -^2)
   (<first> ^param-id <param-id>
            ^type <rtype>)
-->
   (<descs> ^obj-desc <obj-desc>
            ^description <desc>)
   (<desc> ^prep <name>
           ^structure-type <str>
           ^1 <param-id>
           ^2 id2
           ^negative <neg>
           ^id2 <obj2>)
   (<obj-desc> ^1 <obj1>
               ^param-id <param-id>
               ^rtype <rtype>)
}

# More than one param-id in a prepositional phrase indicates the object in the PP is used somewhere else?
sp {states*apply*get-game-details*retrieve-PP-and-individual-objects
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^operator <o>
        	  ^set <set>)
   (<o> ^name get-game-details)
   (<descs> ^handle <handle>)
   (<set> ^handle <handle>
          ^conditions <cond>)
   (<cond> ^name <name>
   	   ^args <args>
   	   ^parameter <param>
   	   ^negative <neg>
       ^structure-type <str>)
   (<args> ^1 <obj1>
           ^2 <obj2>
           -^3) # PR - maybe remove -^3 and instead add a rule that adds a third value if it exists?
   (<param> ^1 <first>
            ^2 <second>)
   (<first> ^param-id <param-id-1>
            ^type <rtype1>)
   (<second> ^param-id <param-id-2>
             ^type <rtype2>)
-->
   (<descs> ^description <desc>
            ^obj-desc <obj-desc1>
            ^obj-desc <obj-desc2>)
   (<desc> ^prep <name>
           ^structure-type <str>
           ^unsatisfied yes #if resolve-satisfaction-failure
           ^1 <param-id-1>
           ^2 <param-id-2>
   	       ^negative <neg>)
   (<obj-desc1> ^1 <obj1>
                ^param-id <param-id-1>
                ^rtype <rtype1>)
   (<obj-desc2> ^1 <obj2>
                ^param-id <param-id-2>
                ^rtype <rtype2>)
}

sp {states*apply*get-game-details*retrieve-PP-and-individual-objects*argument-level-condition
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^operator <o>
              ^set <set>)
   (<o> ^name get-game-details)
   (<descs> ^handle <handle>)
   (<set> ^handle <handle>
          -^conditions <cond>)
   -{(<set> -^conditions.args.<< 1 2 3 >> <cond>)
     (<descs> -^obj-desc.1.args.2 <cond>)}
   (<cond> ^name <name>
           ^args <args>
           ^parameter <param>
           ^negative <neg>
           ^structure-type <str>
           ^type state-pair)
   (<args> ^1 <obj1>
           ^2 <obj2>
           -^3) # PR - maybe remove -^3 and instead add a rule that adds a third value if it exists?
   (<param> ^1 <first>
            ^2 <second>)
   (<first> ^param-id <param-id-1>
            ^type <rtype1>)
   (<second> ^param-id <param-id-2>
             ^type <rtype2>)
-->
   (<descs> ^description <desc>
            ^obj-desc <obj-desc1>
            ^obj-desc <obj-desc2>)
   (<desc> ^prep <name>
           ^structure-type <str>
           ^1 <param-id-1>
           ^2 <param-id-2>
              ^negative <neg>)
   (<obj-desc1> ^1 <obj1>
                ^param-id <param-id-1>
                ^rtype <rtype1>)
   (<obj-desc2> ^1 <obj2>
                ^param-id <param-id-2>
                ^rtype <rtype2>)
}

sp {states*apply*get-game-details*retrieve-conditions-that-are-arguments*attribute-of
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^operator <o>
              ^set <set>)
   (<o> ^name get-game-details)
   (<descs> ^obj-desc <obj-desc1>)
   (<obj-desc1> ^1 <obj1>
                ^param-id <param-id-1>)
   (<obj1> ^args <args>
           ^parameter <param1>)
   (<param1> ^1.param-id <param-id-1>
             ^2 <param2>)
   (<param2> ^param-id <param-id-2>
             ^type <rtype>)
   (<args> -^1
            ^2 <obj2>)
   (<obj2> -^type state-pair) 
-->
   (<obj-desc1> ^type related-by-of
                ^2 <param-id-2>)
   (<descs> ^obj-desc <obj-desc2>)
   (<obj-desc2> ^1 <obj2>
                ^param-id <param-id-2>
                ^rtype <rtype>)
}

# Modifying related-by-of obj-desc to account for its second parameter for e.g. editing "count-of" object-description to add object to it
sp {states*apply*get-game-details*retrieve-conditions-that-are-arguments*attribute-of*state-pair
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^operator <o>
              ^set <set>)
   (<descs> ^obj-desc <obj-desc1>)
   (<obj-desc1> ^1 <obj1>
                ^param-id <param-id-1>)
   (<obj1> ^args <args>
           ^parameter <param1>)
   (<param1> ^1.param-id <param-id-1>
             ^2.param-id <param-id-2>)
   (<args> -^1
            ^2 <obj2>)
   (<obj2> ^type state-pair
           ^args <args2>
           ^parameter <param2>)
   (<args2> ^1 <aobj1>
           ^2 <aobj2>)
   (<param2> ^1.param-id <param-id-2>)
              
-->
   (<obj-desc1> ^type related-by-of
                ^2 <param-id-2>)
}

# Works for greater than 1 (in risk) where 1 does not have a param-id of its own
sp {states*apply*get-game-details*retrieve-conditions-that-are-arguments*get-value-second-argument
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^operator <o>
              ^set <set>)
   (<descs> ^description <desc>)
   (<desc> ^1 <param-id>
           ^2 id2
           ^negative <neg>
           ^id2 <obj2>)
   (<obj2> ^name number
            ^return-type number
            ^result <res>)
   (<res> ^set <res-set>)
   (<res-set> ^instance <inst>)
   (<inst> ^1 <res-val>)
-->
   (<desc> ^type number
           ^id2 <obj2> -
           ^2 id2 -
           ^number <res-val>)
}
           
# The following rule handles predicates with the same param-id for a given condition for e.g. Color of object A is color of object B, here both colors will have the same param-id
# both predicates would have return-type number # PR - TODO a good way to label this would be param-idA and param-idB to distinguish both sides and store them.
#or add a minus sign to one of it if hashmap wil allow it.# or maybe not needed , because something will differ and if we don't have duplicate things, i don't need if condition on line 1754 it will work.
# PR - the order matters
sp {states*apply*get-game-details*retrieve-attribute-based-conditions
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^operator <o>
       	  	  ^set <set>)
   (<o> ^name get-game-details)
   (<descs> ^handle <handle>)
   (<set> ^handle <handle>
          ^conditions <cond>
          ^conditions { <cond2> < <cond> })
   (<cond> ^name <name>
           ^return-type number
           ^args <arg1>
           ^parameter <param1>
           ^rtype <rtype1>)
   (<cond2> ^name <name1>
            ^return-type number
            ^args <arg2>
            ^parameter <param2>
            ^rtype <rtype2>)
   (<param1> ^1.param-id <param-value>
             #^2.param-id <param-obj1-id>
             )
   (<param2> ^1.param-id <param-value>
             #^2.param-id { <> <param-obj1-id> <param-obj2-id> }
             )
   (<arg1> -^1)
#           ^2 <obj1>)
   (<arg2> -^1)
#           ^2 <obj2>)
-->
   (<descs> ^obj-desc <obj-desc1>
            ^obj-desc <obj-desc2>
            ^description <desc>)
   (<obj-desc1> ^1 <cond>
                ^param-id <param-value>
                ^rtype <rtype1>)
   (<obj-desc2> ^1 <cond2>
                ^param-id <param-value>
                ^rtype <rtype2>)
   (<desc> #^name <name>
   	       #^article |the |
           ^negative false
           #^prep is
           ^x <param-value>)
}

sp {states*apply*get-game-details*retrieve-same-param-id-conditions
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^set <set>
              ^operator <o>)
   (<o> ^name get-game-details)
   (<descs> ^obj-desc <obj-desc1>
            ^obj-desc { <obj-desc2> < <obj-desc1> }
            ^description <desc>)
   (<obj-desc1> ^1 <cond>
                ^type related-by-of
                ^param-id <param-value>)
   (<obj-desc2> ^1 { <cond2> <> <cond> }
                ^type related-by-of
                ^param-id <param-value>)
   (<cond> -^name number)  
   (<cond2> -^name number)
   (<desc> ^negative false
           ^x <param-value>)
-->
   (<obj-desc2> ^param-id <param-value> -
                 ^param-id ( - <param-value> ))
   (<desc> ^x <param-value> -
           ^1 <param-value>
           ^2 (- <param-value> ))
}
   
sp {states*apply*get-game-details*retrieve-conditions-that-are-arguments*attribute-of*make-negative
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^set <set>
              ^operator <o>)
   (<o> ^name get-game-details)
   (<descs> ^obj-desc <obj-desc>
            ^description <desc>)
   (<desc> -^set-description
            -^prep
             ^negative <neg>
             ^x <param-value>)
   (<obj-desc> ^1 <cond>
               ^param-id <param-value>)
   (<cond> ^name number)
-->
   (<descs> ^obj-desc <obj-desc> -)
   (<desc> ^2 id2
           ^id2 <cond>
           ^1 <param-value>)
} 
# The following rule handles predicates with the same param-id where one of the predicates is an attribute and the other is a value (String/number), both predicates have
# return-type number for e.g. The number of matched locations is 5
#sp {states*apply*get-game-details*retrieve-attribute-based-condition-and-value
#   (state <s> ^PR-game-details
#              ^descriptions <descs>
#              ^operator <o>
#        	  ^set <set>)
#   (<o> ^name get-game-details)
#   (<set> ^conditions <cond>
#          ^conditions <cond2>)
#   (<cond> ^name <name>
#           ^return-type number
#           ^args <arg1>
#           ^parameter <param1>)
#   (<arg1> -^1
#           ^2 <obj1>)
#   (<cond2> ^name <name2>
#            ^return-type number
#            ^result <res>
#            ^parameter <param2>)
#   (<param1> ^1.param-id <param-value>
#             ^2.param-id <param-obj1-id>)
#   (<param2> ^1.param-id <param-value>)
#   (<res> ^set <res-set>)
#   (<res-set> ^instance <inst>)
#   (<inst> ^1 <res-val>)
#-->
#   (<descs> ^obj-desc <desc1>
#            ^description <desc>)
#   (<desc1> ^1 <obj1>
#            ^param-id <param-obj1-id>)
#   (<desc> #^name <name>
#           ^article |the |
#           ^negative blah #PR- TODO this may not need a negative at all but hack for now
#           ^prep number
#           ^1 <param-obj1-id>
#           ^2 <res-val>)
#}

# The following rule will fire only in case of actions that have verbs present in them       
sp {dialog-event*apply*get-game-details*retrieve-verbs
   (state <s> ^name dialog-event
              ^PR-game-details
              ^descriptions <descs>
              ^set <set>
              ^verb-structure <verb-struct>
              ^operator <o>)
   (<o> ^name get-game-details)
   (<descs> ^handle <handle>)
   (<verb-struct> ^handle <handle>
                  ^<arg-num> <verb>)
   (<verb> ^verb-name <verb-name>
           ^verb-prep <verb-prep>
           ^1 <param-id1>
           ^2 <param-id2>)
-->
   (<descs> ^verb <verb>)
}

# When arguments are part of verb and are not an argument of another condition
sp {states*apply*get-game-details*retrieve-one-argument-predicates-for-verb
   (state <s> ^PR-game-details
              ^descriptions <descs>
              ^verb-structure <verb-struct>
              ^operator <o>
              ^set <set>)
   (<descs> ^handle <handle>)
   (<verb-struct> ^handle <handle>
                  ^<arg-num> <verb>)
   (<verb> ^<< 1 2 >> <param-id>)
   (<o> ^name get-game-details
        #^descriptions <descs>
        )
   (<set> ^handle <handle>
          ^conditions <cond>)
   -{(<set> ^conditions { <> <cond> <cond2> })
     (<cond2> ^args <args>)
     (<args> ^<< 1 2 >> <cond>)}
   (<cond> ^name <name>
           ^args <args>
           ^parameter <param>
          ^negative <neg>)
   (<args> ^1 <obj1>
           -^2
           -^3)
   (<param> ^1 <first>)
   (<first> ^param-id <param-id>
            ^type <rtype>)
-->
   (<descs> ^obj-desc <obj-desc>)
   (<obj-desc> ^1 <cond>
               ^param-id <param-id>
                ^rtype <rtype>)
}

######################################
# Propose add generated attribute
######################################
# Adding generated attribute after the completion of retrieved game details

sp {states*op-no-change*propose*add-generated-attribute
   (state <s> ^superstate <ss>
              ^attribute operator
              ^impasse no-change)
   (<ss> ^name << dialog-event resolve-satisfaction-failure >>
         ^descriptions <descs>
         ^operator.name get-game-details)
   -{(<s> ^descriptions {> <descs> <descs2>})}
-->
   (<s> ^operator <o> +)
   (<o> ^name add-generated-attribute)
}

# The following rule fires in case of an operator no-change, no individual description/obj-desc/verb have been added to the ^descriptions
sp {states*op-no-change*apply*add-generated-attribute*no
   (state <s> ^superstate <ss>
              ^attribute operator
              ^impasse no-change
              ^operator.name add-generated-attribute)
   (<ss> ^name << dialog-event resolve-satisfaction-failure >>
         ^descriptions <descs>)
   (<descs> -^description
            -^obj-desc
            -^verb)
-->
   (<ss> ^generated no)
}

sp {states*op-no-change*apply*add-generated-attribute*yes
   (state <s> ^superstate <ss>
              ^attribute operator
              ^impasse no-change
              ^operator.name add-generated-attribute)
   (<ss> ^name << dialog-event resolve-satisfaction-failure >>
         ^descriptions <descs>)
   (<descs> ^<< description obj-desc verb >> <desc>)
   -{ (<descs> ^<< description obj-desc verb >> {> <desc> <desc2>})}
-->
   (<ss> ^generated yes)
}

########################################################
# Report answer using complete-answer-get-game-details
########################################################

# PR - TODO: Add a ^status complete to ^<gtype> in the apply-get-game-details rule and then on that basis it completes 
sp {dialog-event*propose*complete-answer-get-game-details
   (state <s> ^name dialog-event
              ^PR-game-details
              ^generated <gen>
              ^combined
              -^concept-seen
              #^status complete # adding to check smem referent
              ^descriptions <descs>)
   -{(<s> ^descriptions {> <descs> <descs2>})}
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-answer-get-game-details
        #^descriptions <descs>
        ^generated <gen>)   
}

sp {dialog-event*apply*complete-answer-get-game-details*send-message
   (state <s> ^name dialog-event
              ^PR-game-details
              ^purpose.type <type>
              ^descriptions <descs>
              ^operator <o>
              ^io.output-link <out>)
   (<o> ^name complete-answer-get-game-details
       # ^descriptions <descs>
        ^generated <gen>)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type <type>
          ^fields.descriptions <descs>)
   (<descs> ^generated <gen>)
}

sp {dialog-event*apply*complete-answer-get-game-details*mark*performed
   (state <s> ^name dialog-event
              ^PR-game-details
              ^operator.name complete-answer-get-game-details
              ^top-state.interaction.status <status>)
-->
   (<status> ^performed.dialog-event <de>)
   (<de> ^type explanation
         ^originator agent)
}     
