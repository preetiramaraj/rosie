# PR - Commenting this out because working with chunks and not with smem,
#uncomment this and all-structures-retrieved for this to work

sp {dialog-event*propose*get-predicates-for-pos
   (state <s> #^name dialog-event
              ^set <set>)
   (<set> ^conditions <cond>)
   (<cond> -^POS-retrieved)
-->
   (<s> ^operator <o> + =)
   (<o> ^name get-part-of-speech-objDesc
        ^condition <cond>)
}

sp {dialog-event*propose*get-predicates-for-pos*args
   (state <s> #^name dialog-event
              ^new-set <new-set>)
   (<new-set> ^condition <cond>)
   (<cond> -^POS-retrieved)
-->
    (<s> ^operator <o> + =)
    (<o> ^name get-part-of-speech-objDesc
         ^condition <cond>)
}
           
sp {dialog-event*apply*done-handling-conditions
   (state <s> #^name dialog-event
              #^set <set>
              #^new-set <new-set>
              ^name << dialog-event resolve-satisfaction-failure >>)
   -{(<s> ^set <set>)
     (<set> ^conditions <cond>)
     (<cond> -^POS-retrieved)}
   -{(<s> ^new-set <new-set>)
     (<new-set> ^condition <new-cond>)
     (<new-cond> -^POS-retrieved)}
-->
    (<s> ^all-structures-retrieved true)
}

# Retrieve LTI that has condition handle
#sp {dialog-event*apply*get-part-of-speech-objDesc*retrieve-handle-LTI
#   (state <s> ^name dialog-event
#              ^operator <o>
#              ^smem.command <cmd>
#              ^PR-game-details)
#   (<o> ^name get-part-of-speech-objDesc
#        ^condition <cond>)
#   (<cond> ^name <name>
#           ^args <args>)
#-->   
#   (<cmd> ^query <q> ^depth 5 ^neg-query <neg>)
#   (<q> ^handle <name>)
#   (<neg> ^predicate-structure <pred> # So that handle lti linked to lti with structure-type is retrieved
#          ^multiple <mult> # In order to account for singular/plural word having the same handle block/blocks
#   )
#}   

## After retrieval - retrieve LTI whose relation is current LTI (and that has the part of speech)
#sp {dialog-event*apply*get-part-of-speech-objDesc*retrieval-handle-LTI-success*retrieve-LTI-with-referent
#   (state <s> ^name dialog-event
#              ^operator <o>
#              ^smem <smem>
#              ^PR-game-details)
#   (<smem> ^result.retrieved <ret>
#           ^command <cmd>)
#   (<cmd> ^query <q> ^depth 5
#          ^neg-query <neg>)
#   (<q> ^handle <name>)
#   (<o> ^name get-part-of-speech-objDesc
#        ^condition <cond>)
#   (<cond> ^name <name>
#           ^args <args>)
#--> 
#   (<cmd> ^query <q> -
#          ^depth 5 -
#          ^neg-query <neg> -)
#   (<cmd> ^query <qu> ^depth 5)
#   (<qu> ^referent <ret>
#         ^structure-type <str>) 
#}
#
#sp {dialog-event*apply*get-part-of-speech-objDesc*retrieval-LTI-with-referent-success
#   (state <s> ^name dialog-event
#              ^operator <o>
#              ^smem <smem>
#              ^PR-game-details)  
#   (<smem> ^command <cmd>
#           ^result.retrieved <tret>) 
#   (<tret> ^structure-type <str>)
#   (<cmd> ^query <qu> ^depth 5)
#   (<qu> ^referent <ret>)
#   (<o> ^name get-part-of-speech-objDesc
#        ^condition <cond>)
#   (<cond> ^name <name>
#           ^args <args>)
#-->
#   (<cond> ^structure-type <str>)
#   (<cmd> ^query <qu> -
#          ^depth 5 -)
#}
#
#sp {dialog-event*apply*get-part-of-speech-objDesc*retrieval-LTI-referent-failure*retrieve-with-relation
#   (state <s> ^name dialog-event
#              ^operator <o>
#              ^smem <smem>
#              ^PR-game-details)  
#   (<smem> ^command <cmd>
#           ^result.failure <tret>) 
#   (<cmd> ^query <qu> ^depth 5)
#   (<qu> ^referent <ret>)
#   (<o> ^name get-part-of-speech-objDesc
#        ^condition <cond>)
#   (<cond> ^name <name>
#           ^args <args>)
#-->
#   (<cmd> ^query <qu> -
#          ^query <qu1>)
#   (<qu1> ^relation <ret>
#          ^structure-type <str>)
#}
#
#sp {dialog-event*apply*get-part-of-speech-objDesc*retrieval-with-relation-success
#   (state <s> ^name dialog-event
#              ^operator <o>
#              ^smem <smem>
#              ^PR-game-details)
#   (<smem> ^command <cmd>
#           ^result.retrieved <tret>)
#   (<tret> ^structure-type <str>)
#   (<cmd> ^query <qu> ^depth 5)
#   (<qu> ^relation <ret>)
#   (<o> ^name get-part-of-speech-objDesc
#        ^condition <cond>)
#   (<cond> ^name <name>
#           ^args <args>)
#-->
#   (<cond> ^structure-type <str>)
#   (<cmd> ^query <qu> -
#          ^depth 5 -)
#}
#
## When the word is a primitive relation/object and the POS is present in its super type
#sp {dialog-event*apply*get-part-of-speech-objDesc*retrieval-LTI-relation-failure*retrieve-with-super-type
#   (state <s> ^name dialog-event
#              ^operator <o>
#              ^smem <smem>
#              ^PR-game-details)  
#   (<smem> ^command <cmd>
#           ^result.failure <tret>) 
#   (<cmd> ^query <qu> ^depth 5)
#   (<qu>  ^relation <ret>
#          ^structure-type <str>)   
#   (<o> ^name get-part-of-speech-objDesc
#        ^condition <cond>)
#   (<cond> ^name <name>
#           ^args <args>)
#-->
#   (<qu> ^structure-type <str> -
#         ^super-type <super>)
#}
#
#sp {dialog-event*apply*get-part-of-speech-objDesc*retrieval-with-super-type-success
#   (state <s> ^name dialog-event
#              ^operator <o>
#              ^smem <smem>
#              ^PR-game-details)  
#   (<smem> ^command <cmd>
#           ^result.retrieved <tret>) 
#   (<tret> ^super-type <super>)
#   (<super> ^structure-type <str>)
#   (<cmd> ^query <qu> ^depth 5)
#   (<qu> ^relation <ret>)   
#   (<o> ^name get-part-of-speech-objDesc
#        ^condition <cond>)
#   (<cond> ^name <name>
#           ^args <args>)
#-->
#   (<cond> ^structure-type <str>)
#   (<cmd> ^query <qu> -
#          ^depth 5 -)
#}
# PR - todo maybe for ^name number, add a structure-type called number, as a rule on the bottom

   

sp {dialog-event*apply*get-part-of-speech-objDesc*retrieve-handle-LTI*noun
   (state <s> #^name dialog-event
              ^operator <o>
              ^PR-game-details)
   (<o> ^name get-part-of-speech-objDesc
        ^condition <cond>)
   (<cond> ^name << volume row column section boat1 block object color value husband location count missionary1 cannibal1 bank1 number woman1 man1 husband last-name garbage >>  
           ^args <args>)
-->
   (<cond> ^structure-type N)
}    
    
sp {dialog-event*apply*get-part-of-speech-objDesc*retrieve-handle-LTI*adjective
   (state <s> #^name dialog-event
              ^operator <o>
              ^PR-game-details)
   (<o> ^name get-part-of-speech-objDesc
        ^condition <cond>)
   (<cond> ^name << empty filled linear yellow1 blue1 purple1 red1 green1 captured free occupied matched matched171 covered clear small1 medium1 large1 destination1 current opposite >>
           ^args <args>)
-->
   (<cond> ^structure-type ADJ)
}    
        
sp {dialog-event*apply*get-part-of-speech-objDesc*retrieve-handle-LTI*preposition
   (state <s> #^name dialog-event
              ^operator <o>
              ^PR-game-details)
   (<o> ^name get-part-of-speech-objDesc
        ^condition <cond>)
   (<cond> ^name << adjacent below1 on1 near1 right-of1 left-of1 diagonal-with1 >>
           ^args <args>)
-->
   (<cond> ^structure-type P)
} 
    
sp {dialog-event*apply*get-part-of-speech-objDesc*retrieve-handle-LTI*comparator
   (state <s> #^name dialog-event
              ^operator <o>
              ^PR-game-details)
   (<o> ^name get-part-of-speech-objDesc
        ^condition <cond>)
   (<cond> ^name << greater larger smaller >>
           ^args <args>)
-->
   (<cond> ^structure-type C-ADJ)
}
# add argument condition to new set when condition is not primitive
sp {dialog-event*apply*get-part-of-speech-objDesc*add-to-new-set*not-primitive
   (state <s> #^name dialog-event
              ^operator <o>
              ^new-set <new-set>
              ^PR-game-details)
   (<o> ^name get-part-of-speech-objDesc
        ^condition <cond>)
   (<cond> ^name <name>
           ^args <args>
           ^structure-type <str>)
   -{(<cond> -^attribute { <> primitive <att> })
     (<cond> -^return-type number)} #type << function attribute-of >>)}
   (<args> ^<num> <new-cond>)
   (<new-cond> ^name)
-->
   (<new-set> ^condition <new-cond>)
   (<cond> ^POS-retrieved true)
}

# Set condition with attribute primitive to done
sp {dialog-event*apply*get-part-of-speech-objDesc*add-to-new-set*primitive
   (state <s> #^name dialog-event
              ^operator <o>
              ^new-set <new-set>
              ^PR-game-details)
   (<o> ^name get-part-of-speech-objDesc
        ^condition <cond>)
   (<cond> ^name <name>
           ^args <args>
           ^structure-type <str>)
   -{(<args> ^num)
     (<cond> -^attribute << primitive input-arg >>)}
-->
   (<cond> ^POS-retrieved true)
}
   
        
