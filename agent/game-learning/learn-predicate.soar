#JK move to appropriate location
#elabroate volume if it exists for object onto object

sp {perception-monitor*elaborate*object*volume
	(state <s> ^superstate nil
            ^perception-monitor.object-monitor.object-info <obj>)
 	(<obj> ^wm-obj <wmobj> ^differences.belief-vol <bv>)
  	(<bv> ^type volume ^result.record.value <vol>)
   	(<wmobj> ^predicates <p>)
-->
	(<p> ^volume <vol>)
}

sp {learn-predicate*elaborate*verb-structure
    :o-support
   (state <s> ^name learn-predicate
              ^gtype action
             -^retrieve-handle <name>
              ^verb-structure <vs>
              ^action <a>)
   (<a> ^aname <name>)
-->
    (<a> ^verb-structure <vs>)
}
   
sp {learn-predicate*elaborate*input-args
   (state <s> ^name learn-predicate
              ^gtype <gtype>
             -^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype <rtype>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}

sp {learn-predicate*elaborate*input-args*noparam
#:interrupt
   (state <s> ^name learn-predicate
              ^gtype <gtype>
             -^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype> ^parameter.num 0)
   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^condition <c5>)
   (<c5> ^args.<argn> <c> ^parameter.<argn> <param>)#look at parent for param-id
   (<param> ^param-id <a1>)
   (<c> ^attribute input-arg ^parameter.num 0 ^rtype <rtype>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}

sp {learn-predicate*elaborate*input-args*noparam*2lvel*parent
#:interrupt
   (state <s> ^name learn-predicate
              ^gtype <gtype>
             -^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype> ^parameter.num 0)
   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^condition <c5>)
   (<c5> ^args.<argn> <c6> ^parameter.<argn> <param>)#look at parent for param-id
   (<c6> ^args.<argn> <c> ^parameter.num 0)#look at parent.parent for param-id
   (<param> ^param-id <a1>)
   (<c> ^attribute input-arg ^parameter.num 0 ^rtype <rtype>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}

#try doing it for non parameters too
sp {learn-predicate*elaborate*input-args*set-to-single*objects
   (state <s> ^name learn-predicate
              ^gtype <gtype>
             -^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set) #^parameter.num 0)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^result.set <res> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype single)
   (<nlps> ^aname <name>)
-->
   (<res> ^instance <i15>)
   (<i15> ^1 <obj>)
}

#TODO for learning predicate input
#for now just use any object (don't assume labels were important (maybe for future will be, for ambiguous)
sp {learn-predicate*elaborate*input-args*learning-predicate
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg)
   (<nlps> ^aname <name>)
-->
   (<c> ^result.set <res>)
}

sp {learn-predicate*elaborate*input-args*object*single
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate.name <name>
              ^world.objects.object <obj>
              ^predicate <T5>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype single)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
 -->
   (<res> ^instance <in>)
   (<in> ^1 <obj>)
}
sp {learn-predicate*elaborate*input-args*object*set
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype set)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
 -->
   (<res> ^instance <in>)
   (<in> ^1 <ress>)
}
sp {learn-predicate*elaborate*input-args*object*set*objects
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate.name <name>
              ^world.objects.object <obj>
              ^predicate <T5>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype set)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
   (<res> ^instance <in>)
   (<in> ^1 <ress>)
 -->
   (<ress> ^object <obj>)
}


#elaborate all conditions before world-copy
sp {learn-predicate*elaborate*problem-space*predicate-structure
   (state <s> ^name learn-predicate
              -^superstate.name selection
              ^top-state.world <world2>)
-->
   (<s> ^problem-space <ps>)
   (<ps> ^world <world> ^name game)#JK 1/18/17 ^name action hmmm
   (<world> ^source <world2>
            ^copy-type deep)
}

sp {learn-predicate*elaborate*problem-space*world
    (state <s> ^name learn-predicate ^superstate <ss>)
    (<ss> ^superstate <ts> ^name selection)
    (<ts> ^world <world2> ^name learn-predicate)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^world <world> +  ^dont-copy-anything true + ^name game)#JK 1/18/17 ^name action + hmmm
    (<world> ^source <world2> + ^copy-type deep +)
}

sp {learn-predicate*elaborate*tcn
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<t> -^learned-structure)
   (<op> ^message <t>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
   (<s> ^parsed-structure <t>
        ^gtype <type>
        ^main-type <type>
        ^<type> <act>)
  (<act> ^parameter-set <ps>
        ^potential-args <po>)
}

sp {learn-predicate*elaborate*tcn*nlp-set
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<op> ^nlp-set <nps>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
   (<s> ^parsed-structure <t>
        ^gtype <type>
        ^main-type <type>
        ^<type> <act>)
  (<act> ^parameter-set <ps>
         ^nlp-set <nps>
        ^potential-args <po>)
}

sp {learn-predicate*elaborate*tcn*nlp-set*stored
   (state <s> ^name learn-predicate
              ^quiescence t 
              ^superstate.operator <op>)
   (<t> ^learned-structure <nps>)
   (<op> ^message <t>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
   (<s> ^parsed-structure <t2>
        ^gtype <type>
        ^main-type <type>
        ^<type> <act>)
  (<act> ^parameter-set <ps>
         ^nlp-set <nps>
        ^potential-args <po>)
}

sp {learn-predicate*apply*convert-language-format*clean-old-structures
   (state <s> ^name learn-predicate
             -^<gtype>.nlp-set
              ^parsed-structure <t>
              ^operator <o>
              ^top-state.dialog-context.learn-link <ll>
              ^gtype <gtype>
             -^tcn)
   (<o> ^name convert-parsed-format)
   (<ll> ^predicate-structure <ps>)
   (<ps> ^conditions <nlp>)
-->
   (<ps> ^conditions <nlp> -)
}

sp {learn-predicate*propose*convert-language-format
   (state <s> ^name learn-predicate
             -^<gtype>.nlp-set
              ^parsed-structure <t>
              ^gtype <gtype>
             -^tcn)
-->
   (<s> ^operator <o> + =)
   (<o> ^name convert-parsed-format
        ^structure <t>)
}

sp {learn-predicate*store*verb-structure
   :o-support
   (state <s> ^name learn-predicate
              ^verb-structure <vs>
              ^top-state.dialog-context <dc>
              ^action <t>)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^verb-structure <vs>)
}

sp {learn-predicate*store*structure
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^nlp-set.nlp <nlp> ^formated)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^predicate-structure <ps>)
-->
   (<ps> ^conditions <nlp>)
}

sp {learn-predicate*store*prefer
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^prefer <nlp> ^formated)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^prefer <nlp>)
}

sp {learn-predicate*store*avoid
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^avoid <nlp> ^formated)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^avoid <nlp>)
}

sp {learn-predicate*store*moved
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^moved <nlp> ^formated)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^moved <nlp>)
}

sp {learn-predicate*store*modifier
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^modifier <m> ^formated)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^modifier <m>)
   (<s> ^problemspace game-heuristics)
}


sp {learn-predicate*store*consider
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^consider <nlp> ^formated)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^consider <nlp>)
   (<s> ^problemspace games)
}

sp {learn-predicate*store*opponent
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^nlp-set.opponent <o> ^formated ^handle <n>)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <n>)
-->
   (<ll> ^opponent <o>)
}

sp {learn-predicate*store*structure*argnum
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^main-type {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^parameter-set.argnum <an> ^handle <n>)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <n>)
-->
   (<ll> ^argnum <an>)
}

sp {learn-predicate*store*structure*heuristic
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype heuristic
              ^main-type heuristic
              ^heuristic <t>)
   (<t> ^nlp-set <nl> ^formated ^parameter-set.argnum <an> ^handle <name>)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <name> ^ntype heuristic)
-->
   (<s> ^ntype heuristic)
   (<t> ^ntype heuristic)
}

sp {learn-predicate*store*structure*learned-predicate
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<type> << predicate heuristic >>}
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set <nl> ^formated ^parameter-set.argnum <an> ^handle <name>)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <name>)
-->
   (<ll> ^predicate-structure <ps> ^argnum <an>)
}

sp {learn-predicate*store*structure*learned-predicate*conditions
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<type> << predicate heuristic >>}
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set.nlp <nlp> ^formated ^handle <name>)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^predicate-structure <ps> ^handle <name>)
-->
   (<ps> ^conditions <nlp>)
}

sp {learn-predicate*elaborate*list-games
   (state <s> ^name learn-predicate
              ^main-type <type2>
              ^<type2> <gt>           
              ^top-state.dialog-context <dc>
              ^superstate.operator <op>)
   (<op> ^type <type>)
   (<gt> ^handle <pname> ^formated)
   (<dc> ^learn-link.handle <pname> ^name <name>)
-->
   (<s> ^list.game <g> ^objects <o>)
   (<g> ^game <name> ^type <type> predicate) 
   (<s> ^current <g>)
}

sp {learn-predicate*elaborate*game-name
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.name <name>
              ^superstate.operator <op>)
   (<op> ^type <type> ^message)
-->
   (<s> ^game <name>)
}

sp {learn-predicate*elaborate*actiongoalname
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.aname <aname>)
-->
   (<t> ^aname <aname> ^handle <aname>)
}

sp {learn-predicate*elaborate*opponent
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.opponent <o>)
-->
   (<t> ^opponent <o>)
}

sp {learn-predicate*elaborate*handlename
   (state <s> ^name learn-predicate
              ^main-type <type>
              ^<type> <t>)
   (<t> ^handle <aname>)
-->
	(<t> ^aname <aname>)
}

sp {learn-predicate*propose*formate-conditions
   (state <s> ^name learn-predicate
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set <nlp> -^formated)
-->
   (<s> ^operator <o> + = >)
   (<o> ^name format-conditions
        ^type <type>
        ^nlp-set <nlp>)
}

sp {learn-predicate*elaborate*sub-conditions
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}

sp {learn-predicate*elaborate*simulated-true
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
-->
   (<s> ^simulated true)
}

sp {learn-predicate*elaborate*sub-conditions*predicate
   (state <s> ^name learn-predicate
              ^gtype {<type> << predicate heuristic >>}
              ^<type> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}

sp {learn-predicate*elaborate*sub-conditions*heuristic
   (state <s> ^name learn-predicate
              ^ntype heuristic
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}

sp {learn-predicate*elaborate*sub-conditions*action-predicate
   (state <s> ^name learn-predicate
              #^main-type predicate #may cause issues..
              ^predicate.condition <c>
              ^gtype action
              ^action <t>)
   (<c> ^verb <on> ^type concept ^attribute action)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}

sp {learn-predicate*elaborate*sub-conditions*actiongoal
   (state <s> ^name learn-predicate
              ^superstate.name transfer-action-goal
              ^gtype {<gtype> << action goal failure >> }
              ^<gtype> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}

sp {learn-predicate*elaborate*nlp-set*verb-structure
   (state <s> ^name learn-predicate
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.verb-structure <vs>)
-->
	(<t> ^verb-structure <vs>)
}