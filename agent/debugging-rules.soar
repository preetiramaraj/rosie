sp {top-state*elaborate*agent-params*debug
   (state <s> ^top-state <s>
              ^agent-params <params>)
-->
   (<params> ^debug-op-ties false)        # If true, will interrupt on an operator tie
   (<params> ^debug-ids true)             # If true, will elaborate certain identifiers with debug-ids useful for printing
   (<params> ^enable-interrupts true)    # If true, certain interrupts will fire

   (<params> ^debug-perception true)      # If true, will print additional info about perception related things
   (<params> ^debug-actions false)         # If true, will print additional info about action related things 
   (<params> ^debug-arm false)            # If true, will print additional info about arm related things
   (<params> ^debug-path-planning false)  # If true, will print additional info during path planning
   (<params> ^debug-interaction false)    # If true, will print additional info about interactions
   (<params> ^debug-action-search false)  # If true, will interrupt before and after doing a search for the next action in a task
   (<params> ^debug-policy-learning false)  # If true, will interrupt before retrospective-learning
   (<params> ^print-actions true)         # If true, will print a message every time an action is pushed
   (<params> ^print-comprehension-msgs false)
}

sp {anystate*operator-tie*action*interrupt
   (state <s> ^top-state <top>
              ^impasse tie
              ^problemspace action)
   (<top> ^agent-params.debug-op-ties true)
-->
   (interrupt)
}

sp {anystate*operator-tie*print*operators
   (state <s> ^type state
              ^impasse tie
              ^item.name <name>
              ^top-state <top>)
   (<top> ^agent-params.debug-op-ties true)
-->
   (write |Operator tie on | <s> |: '| <name> |'|  (crlf))
}

# Write messages when an svs filter or command fails

sp {top-state*apply*any-op*report*svs*filter*errors
   (state <s> ^top-state <s>
              ^agent-params.debug-perception true
              ^svs.command <cmd>)
   (<cmd> ^{ << extract extract_once >> } <val>)
   (<val> ^type <type>
          ^status {<status> <> success})
-->
   (write |Filter Error (| <type> |): | <status> (crlf))
}

sp {top-state*apply*any-op*report*svs*command*errors
   (state <s> ^top-state <s>
              ^agent-params.debug-perception true
              ^svs.command <cmd>)
   (<cmd> ^{<type> <> extract <> extract_once } <val>)
   (<val> ^status {<status> <> success})
-->
   (write |Command Error (| <type> |): | <status> (crlf))
}

#### Use Debug Id's ####
# These are little handles for specific identifiers that aid in quick printing during debugging
# Will elaborate an (<id> ^debug-id |id-string|), which then you can easily find through a print command:
# print (* ^debug-id |id-string|), which you can alias to further improve the ease of use
#
alias ppmon print (* ^debug-id percmon)
alias pobjinfo print (* ^debug-id objmon)
alias pchanges print (* ^debug-id perc-changes)
sp {top-state*elaborate*debug-ids*perception-monitor
   (state <s> ^superstate nil
              ^agent-params.debug-ids true
              ^perception-monitor <pmon>)
   (<pmon> ^object-monitor <omon>
           ^predicate-monitor <prmon>
           ^changes <chgs>)
-->
   (<pmon> ^debug-id percmon)
   (<omon> ^debug-id objmon)
   (<prmon> ^debug-id predmon)
   (<chgs> ^debug-id perc-changes)
}
   
alias pworld print (* ^debug-id world)
alias pobjs print (* ^debug-id objs)
alias ppreds print (* ^debug-id preds)
alias probot print (* ^debug-id rob)           
sp {top-state*elaborate*debug-ids*world
   (state <s> ^superstate nil
              ^agent-params.debug-ids true
              ^world <w>)
   (<w> ^objects <objs>
        ^robot <rob>
        ^predicates <preds>)
-->
   (<w> ^debug-id world)
   (<objs> ^debug-id objs)
   (<rob> ^debug-id rob)
   (<preds> ^debug-id preds)
}
   

#game debugging
#
alias pgame print (* ^type game-learning)
alias mem production memory-usage
alias pfc print -fc
alias stcyc stats --cycle
alias statsm stats -M

